package com.example.cryptofunding.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.12.
 */
@SuppressWarnings("rawtypes")
public class MyContract extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613368806100606000396000f3fe60806040526004361061014b5760003560e01c8063b48aa528116100b6578063ce4aa4761161006f578063ce4aa47614610905578063e371968514610940578063e65d4b1b146109ac578063e8ba650914610a1b578063ed6423f914610a6e578063f99f41a514610abd5761014b565b8063b48aa52814610743578063bc9683261461077e578063c41a360a146107a9578063c9d27afe14610824578063ca1d209d1461086b578063ca6438b6146108995761014b565b80636e8141e4116101085780636e8141e41461040e578063865df0ad1461045d5780639a5dc3f614610498578063a5827767146104e7578063a640d2f11461058d578063a958cc54146106f05761014b565b80630da031f614610150578063107046bd146101a35780631a6615d0146102575780631c8d506e146102fd578063552be4c01461034c5780635ec85f6c1461039f575b600080fd5b34801561015c57600080fd5b506101896004803603602081101561017357600080fd5b8101908080359060200190929190505050610b10565b604051808215151515815260200191505060405180910390f35b3480156101af57600080fd5b506101dc600480360360208110156101c657600080fd5b8101908080359060200190929190505050610bbf565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185815260200184151515158152602001831515151581526020018281526020019850505050505050505060405180910390f35b34801561026357600080fd5b506102a66004803603602081101561027a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c4e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102e95780820151818401526020810190506102ce565b505050509050019250505060405180910390f35b34801561030957600080fd5b506103366004803603602081101561032057600080fd5b8101908080359060200190929190505050610ce5565b6040518082815260200191505060405180910390f35b34801561035857600080fd5b506103856004803603602081101561036f57600080fd5b8101908080359060200190929190505050610d45565b604051808215151515815260200191505060405180910390f35b3480156103ab57600080fd5b506103f8600480360360408110156103c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610db7565b6040518082815260200191505060405180910390f35b34801561041a57600080fd5b506104476004803603602081101561043157600080fd5b8101908080359060200190929190505050610de5565b6040518082815260200191505060405180910390f35b34801561046957600080fd5b506104966004803603602081101561048057600080fd5b8101908080359060200190929190505050610e16565b005b3480156104a457600080fd5b506104d1600480360360208110156104bb57600080fd5b8101908080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156104f357600080fd5b506105366004803603602081101561050a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611457565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561057957808201518184015260208101905061055e565b505050509050019250505060405180910390f35b34801561059957600080fd5b506106ee600480360360608110156105b057600080fd5b8101908080359060200190929190803590602001906401000000008111156105d757600080fd5b8201836020820111156105e957600080fd5b8035906020019184602083028401116401000000008311171561060b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561066b57600080fd5b82018360208201111561067d57600080fd5b8035906020019184602083028401116401000000008311171561069f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506114ee565b005b3480156106fc57600080fd5b506107296004803603602081101561071357600080fd5b8101908080359060200190929190505050611982565b604051808215151515815260200191505060405180910390f35b34801561074f57600080fd5b5061077c6004803603602081101561076657600080fd5b81019080803590602001909291905050506119bd565b005b34801561078a57600080fd5b50610793611cd6565b6040518082815260200191505060405180910390f35b3480156107b557600080fd5b506107e2600480360360208110156107cc57600080fd5b8101908080359060200190929190505050611ce5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083057600080fd5b506108696004803603604081101561084757600080fd5b8101908080359060200190929190803515159060200190929190505050611d36565b005b6108976004803603602081101561088157600080fd5b81019080803590602001909291905050506120a9565b005b3480156108a557600080fd5b506108ae61256f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108f15780820151818401526020810190506108d6565b505050509050019250505060405180910390f35b34801561091157600080fd5b5061093e6004803603602081101561092857600080fd5b8101908080359060200190929190505050612604565b005b34801561094c57600080fd5b5061095561291e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561099857808201518184015260208101905061097d565b505050509050019250505060405180910390f35b3480156109b857600080fd5b50610a05600480360360408110156109cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129b3565b6040518082815260200191505060405180910390f35b348015610a2757600080fd5b50610a5460048036036020811015610a3e57600080fd5b81019080803590602001909291905050506129e1565b604051808215151515815260200191505060405180910390f35b348015610a7a57600080fd5b50610aa760048036036020811015610a9157600080fd5b8101908080359060200190929190505050612a1f565b6040518082815260200191505060405180910390f35b348015610ac957600080fd5b50610af660048036036020811015610ae057600080fd5b8101908080359060200190929190505050612a50565b604051808215151515815260200191505060405180910390f35b600060018281548110610b1f57fe5b90600052602060002090600b0201600a016000610b3b84612a1f565b8152602001908152602001600020610b5283612a8e565b81548110610b5c57fe5b906000526020600020906005020160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60018181548110610bcc57fe5b90600052602060002090600b02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cd957602002820191906000526020600020905b815481526020019060010190808311610cc5575b50505050509050919050565b600060018281548110610cf457fe5b90600052602060002090600b020160080160008081526020019081526020016000206001610d2184612a1f565b0381548110610d2c57fe5b9060005260206000209060020201600001549050919050565b6000610d5082612ad4565b600060018381548110610d5f57fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414159050919050565b60026020528160005260406000208181548110610dd057fe5b90600052602060002001600091509150505481565b6000610df082612ad4565b60018281548110610dfd57fe5b90600052602060002090600b0201600301549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b610ee181612a50565b610f53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b610f5c816129e1565b15610fcf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f50726f6a65637420697320636c6f73656400000000000000000000000000000081525060200191505060405180910390fd5b6000610fda82612b54565b905060006001811115610fe957fe5b610ff283612b7d565b60000151600181111561100157fe5b141561108e5780156110495760006001838154811061101c57fe5b90600052602060002090600b020160050160016101000a81548160ff021916908315150217905550611089565b61105282612cb5565b600180838154811061106057fe5b90600052602060002090600b020160050160006101000a81548160ff0219169083151502179055505b611422565b60018081111561109a57fe5b6110a383612b7d565b6000015160018111156110b257fe5b14156114215780156113e0576110c782612f9c565b1561120a57600182815481106110d957fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6001848154811061113157fe5b90600052602060002090600b0201600201549081150290604051600060405180830381858888f193505050506111cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f756c64206e6f742073656e642066756e6420746f206f776e65720000000081525060200191505060405180910390fd5b60018083815481106111dd57fe5b90600052602060002090600b020160050160006101000a81548160ff0219169083151502179055506113db565b60006001838154811061121957fe5b90600052602060002090600b02016008016000808152602001908152602001600020600161124685612a1f565b038154811061125157fe5b90600052602060002090600202016001015490506001838154811061127257fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505061134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f756c64206e6f742073656e642066756e6420746f206f776e65720000000081525060200191505060405180910390fd5b806001848154811061135857fe5b90600052602060002090600b02016002016000828254039250508190555060006001848154811061138557fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555060018084815481106113bb57fe5b90600052602060002090600b020160040160008282540192505081905550505b611420565b6113e982612cb5565b60018083815481106113f757fe5b90600052602060002090600b020160050160006101000a81548160ff0219169083151502179055505b5b5b5050565b600061143182612ad4565b6001828154811061143e57fe5b90600052602060002090600b0201600101549050919050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156114e257602002820191906000526020600020905b8154815260200190600101908083116114ce575b50505050509050919050565b60008311611547576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806131c46022913960400191505060405180910390fd5b815183146115a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806132fc6038913960400191505060405180910390fd5b805183146115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806132826036913960400191505060405180910390fd5b8160008151811061160657fe5b60200260200101514210611665576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806132d96023913960400191505060405180910390fd5b61166d6130fb565b6040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200185815260200160018152602001600015158152602001600015158152602001600081525090506001819080600181540180825580915050906001820390600052602060002090600b02016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e0820151816006015550505060008090505b8481101561190b57600081111561184c578360018203815181106117d957fe5b60200260200101518482815181106117ed57fe5b60200260200101511161184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806132b86021913960400191505060405180910390fd5b5b6001808080549050038154811061185f57fe5b90600052602060002090600b02016008016000808152602001908152602001600020604051806040016040528086848151811061189857fe5b602002602001015181526020018584815181106118b157fe5b602002602001015181525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505080806001019150506117b9565b50600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611953611cd6565b908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b600061198d82612a50565b806119a5575061199c82610ce5565b6203f480420110155b156119b357600090506119b8565b600190505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b60018181548110611a8c57fe5b90600052602060002090600b020160050160019054906101000a900460ff1615611b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6a65637420697320616c726561647920696e20766f746500000000000081525060200191505060405180910390fd5b60018181548110611b2b57fe5b90600052602060002090600b020160050160009054906101000a900460ff1615611bbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b60018181548110611bca57fe5b90600052602060002090600b0201600a016000611be683612a1f565b8152602001908152602001600020604051806080016040528060006001811115611c0c57fe5b815260200160008152602001600081526020016203f48042018152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548160ff02191690836001811115611c7757fe5b02179055506020820151816001015560408201518160020155606082015181600301555050506001808281548110611cab57fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555050565b60006001808054905003905090565b6000611cf082612ad4565b60018281548110611cfd57fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611d3f82612a50565b611db1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b611dba826129e1565b15611e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f50726f6a6563742066756e64696e672069732066696e6973686564000000000081525060200191505060405180910390fd5b611e3682610d45565b611e8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806132096026913960400191505060405180910390fd5b611e9482610b10565b15611f07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f53656e64657220616c726561647920766f74656400000000000000000000000081525060200191505060405180910390fd5b6001808381548110611f1557fe5b90600052602060002090600b0201600a016000611f3185612a1f565b8152602001908152602001600020611f4884612a8e565b81548110611f5257fe5b906000526020600020906005020160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550801561203357611fc682612fe4565b60018381548110611fd357fe5b90600052602060002090600b0201600a016000611fef85612a1f565b815260200190815260200160002061200684612a8e565b8154811061201057fe5b9060005260206000209060050201600101600082825401925050819055506120a5565b61203c82612fe4565b6001838154811061204957fe5b90600052602060002090600b0201600a01600061206585612a1f565b815260200190815260200160002061207c84612a8e565b8154811061208657fe5b9060005260206000209060050201600201600082825401925050819055505b5050565b60003411612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806131e66023913960400191505060405180910390fd5b343373ffffffffffffffffffffffffffffffffffffffff16311015612172576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806132616021913960400191505060405180910390fd5b61217b81612ad4565b6001818154811061218857fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561223e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061322f6032913960400191505060405180910390fd5b6001818154811061224b57fe5b90600052602060002090600b020160050160019054906101000a900460ff16156122dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50726f6a6563742069732063757272656e746c7920696e20766f74650000000081525060200191505060405180910390fd5b600181815481106122ea57fe5b90600052602060002090600b020160050160009054906101000a900460ff161561237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f50726f6a6563742066756e64696e672069732066696e6973686564000000000081525060200191505060405180910390fd5b61238581610d45565b6124ab57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550336001828154811061240057fe5b90600052602060002090600b020160070160006001848154811061242057fe5b90600052602060002090600b020160060154815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180828154811061248c57fe5b90600052602060002090600b0201600601600082825401925050819055505b34600182815481106124b957fe5b90600052602060002090600b02016001016000828254019250508190555034600182815481106124e557fe5b90600052602060002090600b020160020160008282540192505081905550346001828154811061251157fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156125fa57602002820191906000526020600020905b8154815260200190600101908083116125e6575b5050505050905090565b61260d81610d45565b612662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806132096026913960400191505060405180910390fd5b6001818154811061266f57fe5b90600052602060002090600b020160050160019054906101000a900460ff1615612701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6a65637420697320616c726561647920696e20766f746500000000000081525060200191505060405180910390fd5b6001818154811061270e57fe5b90600052602060002090600b020160050160009054906101000a900460ff16156127a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b6127a981610ce5565b6203f480420110612805576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061318e6036913960400191505060405180910390fd5b6001818154811061281257fe5b90600052602060002090600b0201600a01600061282e83612a1f565b815260200190815260200160002060405180608001604052806000600181111561285457fe5b815260200160008152602001600081526020016203f48042018152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548160ff021916908360018111156128bf57fe5b021790555060208201518160010155604082015181600201556060820151816003015550505060018082815481106128f357fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555050565b6060600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156129a957602002820191906000526020600020905b815481526020019060010190808311612995575b5050505050905090565b600360205281600052604060002081815481106129cc57fe5b90600052602060002001600091509150505481565b60006129ec82612ad4565b600182815481106129f957fe5b90600052602060002090600b020160050160009054906101000a900460ff169050919050565b6000612a2a82612ad4565b60018281548110612a3757fe5b90600052602060002090600b0201600401549050919050565b6000612a5b82612ad4565b60018281548110612a6857fe5b90600052602060002090600b020160050160019054906101000a900460ff169050919050565b60006001808381548110612a9e57fe5b90600052602060002090600b0201600a016000612aba85612a1f565b815260200190815260200160002080549050039050919050565b8060018080549050031015612b51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f50726f6a65637420646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b50565b6000612b5e61315a565b612b6783612b7d565b9050806040015181602001511015915050919050565b612b8561315a565b612b8e82612a50565b612c00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b60018281548110612c0d57fe5b90600052602060002090600b0201600a016000612c2984612a1f565b8152602001908152602001600020612c4083612a8e565b81548110612c4a57fe5b90600052602060002090600502016040518060800160405290816000820160009054906101000a900460ff166001811115612c8157fe5b6001811115612c8c57fe5b815260200160018201548152602001600282015481526020016003820154815250509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b612d80816129e1565b15612df3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b60008090505b60018281548110612e0657fe5b90600052602060002090600b020160060154811015612f985760006103e8612e2d84613073565b60018581548110612e3a57fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281612e9157fe5b04905060018381548110612ea157fe5b90600052602060002090600b0201600701600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050612f8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4572726f72207768696c6520726566756e64696e67000000000000000000000081525060200191505060405180910390fd5b508080600101915050612df9565b5050565b600060018281548110612fab57fe5b90600052602060002090600b02016003015460018381548110612fca57fe5b90600052602060002090600b020160040154149050919050565b600060018281548110612ff357fe5b90600052602060002090600b020160010154600a6001848154811061301457fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054028161306b57fe5b049050919050565b600080600090505b6001838154811061308857fe5b90600052602060002090600b0201600101548110156130cb576103e8600184815481106130b157fe5b90600052602060002090600b02016002015402905061307b565b600183815481106130d857fe5b90600052602060002090600b02016001015481816130f257fe5b04915050919050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b60405180608001604052806000600181111561317257fe5b8152602001600081526020016000815260200160008152509056fe42616c6c6f742063616e6e6f742062652061736b656420332064617973206265666f72652074686520656e64206f662061207461736b546f74616c207461736b73206d7573742062652067726561746572207468616e2030416d6f756e742073656e742073686f756c6420626520686967686572207468616e203053656e646572206973206e6f7420612066756e646572206f6620746869732070726f6a65637450726f6a656374206f776e65722063616e6e6f742073656e642066756e647320746f20686973206f776e2070726f6a65637453656e64657220646f6573206e6f74206861766520656e6f7567682066756e64734e756d626572206f66207461736b7320646f206e6f7420636f72726573706f6e6420746f206e756d626572206f6620616d6f756e7473446561646c696e65732073686f756c6420616c7761797320626520686967686572446561646c696e65732073686f756c6420626520686967686572207468616e206e6f774e756d626572206f66207461736b7320646f206e6f7420636f72726573706f6e6420746f206e756d626572206f6620646561646c696e6573a265627a7a7231582041d9a44449805625707780d5fcb9f615584a0fe2d6a0ad6216103a66cbb2a6f764736f6c63430005100032";

    public static final String FUNC_FUNDERPROJECT = "funderProject";

    public static final String FUNC_OWNERPROJECT = "ownerProject";

    public static final String FUNC_PROJECTS = "projects";

    public static final String FUNC_LAUNCHFUNDINGPROJECT = "launchFundingProject";

    public static final String FUNC_ENDVOTE = "endVote";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_DIDVOTE = "didVote";

    public static final String FUNC_GETDEADLINEFORCURRENTTASK = "getDeadlineForCurrentTask";

    public static final String FUNC_ASKEDBALLOT = "askedBallot";

    public static final String FUNC_LAUNCHBALLOT = "launchBallot";

    public static final String FUNC_GETNEXTID = "getNextId";

    public static final String FUNC_FUND = "fund";

    public static final String FUNC_CURRENTTASK = "currentTask";

    public static final String FUNC_GETTOTALTASKS = "getTotalTasks";

    public static final String FUNC_ISFINISHED = "isFinished";

    public static final String FUNC_ISINVOTE = "isInVote";

    public static final String FUNC_ISFUNDER = "isFunder";

    public static final String FUNC_GETAMOUNTCOLLECTED = "getAmountCollected";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPROJECTSFOROWNER = "getProjectsForOwner";

    public static final String FUNC_GETPROJECTSFORFUNDER = "getProjectsForFunder";

    public static final String FUNC_GETCURRENTADDRESSPROJECTS = "getCurrentAddressProjects";

    public static final String FUNC_GETCURRENTADDRESSFUNDEDPROJECTS = "getCurrentAddressFundedProjects";

    public static final String FUNC_CANASKVOTE = "canAskVote";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> funderProject(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_FUNDERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> ownerProject(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_OWNERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>> projects(BigInteger param0) {
        final Function function = new Function(FUNC_PROJECTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>>(function,
                new Callable<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> launchFundingProject(BigInteger totalTasks, List<BigInteger> deadlines, List<BigInteger> amounts) {
        final Function function = new Function(
                FUNC_LAUNCHFUNDINGPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(totalTasks), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(deadlines, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endVote(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ENDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger projectId, Boolean value) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId), 
                new org.web3j.abi.datatypes.Bool(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> didVote(BigInteger projectId) {
        final Function function = new Function(FUNC_DIDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getDeadlineForCurrentTask(BigInteger projectId) {
        final Function function = new Function(FUNC_GETDEADLINEFORCURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> askedBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ASKEDBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> launchBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_LAUNCHBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNextId() {
        final Function function = new Function(FUNC_GETNEXTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> fund(BigInteger projectId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_FUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> currentTask(BigInteger projectId) {
        final Function function = new Function(FUNC_CURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalTasks(BigInteger projectId) {
        final Function function = new Function(FUNC_GETTOTALTASKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isFinished(BigInteger projectId) {
        final Function function = new Function(FUNC_ISFINISHED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isInVote(BigInteger projectId) {
        final Function function = new Function(FUNC_ISINVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isFunder(BigInteger projectId) {
        final Function function = new Function(FUNC_ISFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getAmountCollected(BigInteger projectId) {
        final Function function = new Function(FUNC_GETAMOUNTCOLLECTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner(BigInteger projectId) {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getProjectsForOwner(String _owner) {
        final Function function = new Function(FUNC_GETPROJECTSFOROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getProjectsForFunder(String _funder) {
        final Function function = new Function(FUNC_GETPROJECTSFORFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_funder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCurrentAddressProjects() {
        final Function function = new Function(FUNC_GETCURRENTADDRESSPROJECTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCurrentAddressFundedProjects() {
        final Function function = new Function(FUNC_GETCURRENTADDRESSFUNDEDPROJECTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> canAskVote(BigInteger projectId) {
        final Function function = new Function(FUNC_CANASKVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
