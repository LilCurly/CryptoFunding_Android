package com.example.cryptofunding;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.12.
 */
@SuppressWarnings("rawtypes")
public class MyContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ASKEDBALLOT = "askedBallot";

    public static final String FUNC_CURRENTTASK = "currentTask";

    public static final String FUNC_DIDVOTE = "didVote";

    public static final String FUNC_ENDVOTE = "endVote";

    public static final String FUNC_FUND = "fund";

    public static final String FUNC_FUNDERPROJECT = "funderProject";

    public static final String FUNC_GETAMOUNTCOLLECTED = "getAmountCollected";

    public static final String FUNC_GETCURRENTADDRESSFUNDEDPROJECTS = "getCurrentAddressFundedProjects";

    public static final String FUNC_GETCURRENTADDRESSPROJECTS = "getCurrentAddressProjects";

    public static final String FUNC_GETDEADLINEFORCURRENTTASK = "getDeadlineForCurrentTask";

    public static final String FUNC_GETNEXTID = "getNextId";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPROJECTSFORFUNDER = "getProjectsForFunder";

    public static final String FUNC_GETPROJECTSFOROWNER = "getProjectsForOwner";

    public static final String FUNC_GETTOTALTASKS = "getTotalTasks";

    public static final String FUNC_ISFINISHED = "isFinished";

    public static final String FUNC_ISFUNDER = "isFunder";

    public static final String FUNC_ISINVOTE = "isInVote";

    public static final String FUNC_LAUNCHBALLOT = "launchBallot";

    public static final String FUNC_LAUNCHFUNDINGPROJECT = "launchFundingProject";

    public static final String FUNC_OWNERPROJECT = "ownerProject";

    public static final String FUNC_PROJECTS = "projects";

    public static final String FUNC_VOTE = "vote";

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> askedBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ASKEDBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> currentTask(BigInteger projectId) {
        final Function function = new Function(
                FUNC_CURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> didVote(BigInteger projectId) {
        final Function function = new Function(
                FUNC_DIDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endVote(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ENDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> fund(BigInteger projectId) {
        final Function function = new Function(
                FUNC_FUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> funderProject(String param0, BigInteger param1) {
        final Function function = new Function(
                FUNC_FUNDERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAmountCollected(BigInteger projectId) {
        final Function function = new Function(
                FUNC_GETAMOUNTCOLLECTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getCurrentAddressFundedProjects() {
        final Function function = new Function(
                FUNC_GETCURRENTADDRESSFUNDEDPROJECTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getCurrentAddressProjects() {
        final Function function = new Function(
                FUNC_GETCURRENTADDRESSPROJECTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getDeadlineForCurrentTask(BigInteger projectId) {
        final Function function = new Function(
                FUNC_GETDEADLINEFORCURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getNextId() {
        final Function function = new Function(
                FUNC_GETNEXTID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getOwner(BigInteger projectId) {
        final Function function = new Function(
                FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getProjectsForFunder(String _funder) {
        final Function function = new Function(
                FUNC_GETPROJECTSFORFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _funder)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getProjectsForOwner(String _owner) {
        final Function function = new Function(
                FUNC_GETPROJECTSFOROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getTotalTasks(BigInteger projectId) {
        final Function function = new Function(
                FUNC_GETTOTALTASKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isFinished(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ISFINISHED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isFunder(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ISFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isInVote(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ISINVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> launchBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_LAUNCHBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> launchFundingProject(BigInteger totalTasks, List<BigInteger> deadlines, List<BigInteger> amounts) {
        final Function function = new Function(
                FUNC_LAUNCHFUNDINGPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(totalTasks), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(deadlines, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> ownerProject(String param0, BigInteger param1) {
        final Function function = new Function(
                FUNC_OWNERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> projects(BigInteger param0) {
        final Function function = new Function(
                FUNC_PROJECTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger projectId, Boolean value) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId), 
                new org.web3j.abi.datatypes.Bool(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
