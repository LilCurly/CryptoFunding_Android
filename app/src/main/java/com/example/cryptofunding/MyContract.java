package com.example.cryptofunding;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.12.
 */
@SuppressWarnings("rawtypes")
public class MyContract extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506132cf806100606000396000f3fe6080604052600436106101405760003560e01c8063b48aa528116100b6578063ce4aa4761161006f578063ce4aa476146108a7578063e3719685146108e2578063e65d4b1b1461094e578063e8ba6509146109bd578063ed6423f914610a10578063f99f41a514610a5f57610140565b8063b48aa528146106e5578063bc96832614610720578063c41a360a1461074b578063c9d27afe146107c6578063ca1d209d1461080d578063ca6438b61461083b57610140565b80635ec85f6c116101085780635ec85f6c146103945780636e8141e414610403578063865df0ad146104525780639a5dc3f61461048d578063a5827767146104dc578063a640d2f11461058257610140565b80630da031f614610145578063107046bd146101985780631a6615d01461024c5780631c8d506e146102f2578063552be4c014610341575b600080fd5b34801561015157600080fd5b5061017e6004803603602081101561016857600080fd5b8101908080359060200190929190505050610ab2565b604051808215151515815260200191505060405180910390f35b3480156101a457600080fd5b506101d1600480360360208110156101bb57600080fd5b8101908080359060200190929190505050610b61565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185815260200184151515158152602001831515151581526020018281526020019850505050505050505060405180910390f35b34801561025857600080fd5b5061029b6004803603602081101561026f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bf0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102de5780820151818401526020810190506102c3565b505050509050019250505060405180910390f35b3480156102fe57600080fd5b5061032b6004803603602081101561031557600080fd5b8101908080359060200190929190505050610c87565b6040518082815260200191505060405180910390f35b34801561034d57600080fd5b5061037a6004803603602081101561036457600080fd5b8101908080359060200190929190505050610ce7565b604051808215151515815260200191505060405180910390f35b3480156103a057600080fd5b506103ed600480360360408110156103b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d59565b6040518082815260200191505060405180910390f35b34801561040f57600080fd5b5061043c6004803603602081101561042657600080fd5b8101908080359060200190929190505050610d87565b6040518082815260200191505060405180910390f35b34801561045e57600080fd5b5061048b6004803603602081101561047557600080fd5b8101908080359060200190929190505050610db8565b005b34801561049957600080fd5b506104c6600480360360208110156104b057600080fd5b81019080803590602001909291905050506113c8565b6040518082815260200191505060405180910390f35b3480156104e857600080fd5b5061052b600480360360208110156104ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113f9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561056e578082015181840152602081019050610553565b505050509050019250505060405180910390f35b34801561058e57600080fd5b506106e3600480360360608110156105a557600080fd5b8101908080359060200190929190803590602001906401000000008111156105cc57600080fd5b8201836020820111156105de57600080fd5b8035906020019184602083028401116401000000008311171561060057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561066057600080fd5b82018360208201111561067257600080fd5b8035906020019184602083028401116401000000008311171561069457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611490565b005b3480156106f157600080fd5b5061071e6004803603602081101561070857600080fd5b8101908080359060200190929190505050611924565b005b34801561072c57600080fd5b50610735611c3d565b6040518082815260200191505060405180910390f35b34801561075757600080fd5b506107846004803603602081101561076e57600080fd5b8101908080359060200190929190505050611c4c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d257600080fd5b5061080b600480360360408110156107e957600080fd5b8101908080359060200190929190803515159060200190929190505050611c9d565b005b6108396004803603602081101561082357600080fd5b8101908080359060200190929190505050612010565b005b34801561084757600080fd5b506108506124d6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610893578082015181840152602081019050610878565b505050509050019250505060405180910390f35b3480156108b357600080fd5b506108e0600480360360208110156108ca57600080fd5b810190808035906020019092919050505061256b565b005b3480156108ee57600080fd5b506108f7612885565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561093a57808201518184015260208101905061091f565b505050509050019250505060405180910390f35b34801561095a57600080fd5b506109a76004803603604081101561097157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061291a565b6040518082815260200191505060405180910390f35b3480156109c957600080fd5b506109f6600480360360208110156109e057600080fd5b8101908080359060200190929190505050612948565b604051808215151515815260200191505060405180910390f35b348015610a1c57600080fd5b50610a4960048036036020811015610a3357600080fd5b8101908080359060200190929190505050612986565b6040518082815260200191505060405180910390f35b348015610a6b57600080fd5b50610a9860048036036020811015610a8257600080fd5b81019080803590602001909291905050506129b7565b604051808215151515815260200191505060405180910390f35b600060018281548110610ac157fe5b90600052602060002090600b0201600a016000610add84612986565b8152602001908152602001600020610af4836129f5565b81548110610afe57fe5b906000526020600020906005020160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60018181548110610b6e57fe5b90600052602060002090600b02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c7b57602002820191906000526020600020905b815481526020019060010190808311610c67575b50505050509050919050565b600060018281548110610c9657fe5b90600052602060002090600b020160080160008081526020019081526020016000206001610cc384612986565b0381548110610cce57fe5b9060005260206000209060020201600001549050919050565b6000610cf282612a3b565b600060018381548110610d0157fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414159050919050565b60026020528160005260406000208181548110610d7257fe5b90600052602060002001600091509150505481565b6000610d9282612a3b565b60018281548110610d9f57fe5b90600052602060002090600b0201600301549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b610e83816129b7565b610ef5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b610efe81612948565b15610f71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f50726f6a65637420697320636c6f73656400000000000000000000000000000081525060200191505060405180910390fd5b6000610f7c82612abb565b905060006001811115610f8b57fe5b610f9483612ae4565b600001516001811115610fa357fe5b1415611030578015610feb57600060018381548110610fbe57fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555061102b565b610ff482612c1c565b600180838154811061100257fe5b90600052602060002090600b020160050160006101000a81548160ff0219169083151502179055505b6113c4565b60018081111561103c57fe5b61104583612ae4565b60000151600181111561105457fe5b14156113c35780156113825761106982612f03565b156111ac576001828154811061107b57fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600184815481106110d357fe5b90600052602060002090600b0201600201549081150290604051600060405180830381858888f19350505050611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f756c64206e6f742073656e642066756e6420746f206f776e65720000000081525060200191505060405180910390fd5b600180838154811061117f57fe5b90600052602060002090600b020160050160006101000a81548160ff02191690831515021790555061137d565b6000600183815481106111bb57fe5b90600052602060002090600b0201600801600080815260200190815260200160002060016111e885612986565b03815481106111f357fe5b90600052602060002090600202016001015490506001838154811061121457fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506112ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f756c64206e6f742073656e642066756e6420746f206f776e65720000000081525060200191505060405180910390fd5b80600184815481106112fa57fe5b90600052602060002090600b02016002016000828254039250508190555060006001848154811061132757fe5b90600052602060002090600b020160050160016101000a81548160ff021916908315150217905550600180848154811061135d57fe5b90600052602060002090600b020160040160008282540192505081905550505b6113c2565b61138b82612c1c565b600180838154811061139957fe5b90600052602060002090600b020160050160006101000a81548160ff0219169083151502179055505b5b5b5050565b60006113d382612a3b565b600182815481106113e057fe5b90600052602060002090600b0201600101549050919050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561148457602002820191906000526020600020905b815481526020019060010190808311611470575b50505050509050919050565b600083116114e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061312b6022913960400191505060405180910390fd5b81518314611542576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806132636038913960400191505060405180910390fd5b8051831461159b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806131e96036913960400191505060405180910390fd5b816000815181106115a857fe5b60200260200101514210611607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806132406023913960400191505060405180910390fd5b61160f613062565b6040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200185815260200160018152602001600015158152602001600015158152602001600081525090506001819080600181540180825580915050906001820390600052602060002090600b02016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e0820151816006015550505060008090505b848110156118ad5760008111156117ee5783600182038151811061177b57fe5b602002602001015184828151811061178f57fe5b6020026020010151116117ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061321f6021913960400191505060405180910390fd5b5b6001808080549050038154811061180157fe5b90600052602060002090600b02016008016000808152602001908152602001600020604051806040016040528086848151811061183a57fe5b6020026020010151815260200185848151811061185357fe5b6020026020010151815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050808060010191505061175b565b50600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206118f5611c3d565b908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b600181815481106119f357fe5b90600052602060002090600b020160050160019054906101000a900460ff1615611a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6a65637420697320616c726561647920696e20766f746500000000000081525060200191505060405180910390fd5b60018181548110611a9257fe5b90600052602060002090600b020160050160009054906101000a900460ff1615611b24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b60018181548110611b3157fe5b90600052602060002090600b0201600a016000611b4d83612986565b8152602001908152602001600020604051806080016040528060006001811115611b7357fe5b815260200160008152602001600081526020016203f48042018152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548160ff02191690836001811115611bde57fe5b02179055506020820151816001015560408201518160020155606082015181600301555050506001808281548110611c1257fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555050565b60006001808054905003905090565b6000611c5782612a3b565b60018281548110611c6457fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611ca6826129b7565b611d18576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b611d2182612948565b15611d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f50726f6a6563742066756e64696e672069732066696e6973686564000000000081525060200191505060405180910390fd5b611d9d82610ce7565b611df2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806131706026913960400191505060405180910390fd5b611dfb82610ab2565b15611e6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f53656e64657220616c726561647920766f74656400000000000000000000000081525060200191505060405180910390fd5b6001808381548110611e7c57fe5b90600052602060002090600b0201600a016000611e9885612986565b8152602001908152602001600020611eaf846129f5565b81548110611eb957fe5b906000526020600020906005020160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015611f9a57611f2d82612f4b565b60018381548110611f3a57fe5b90600052602060002090600b0201600a016000611f5685612986565b8152602001908152602001600020611f6d846129f5565b81548110611f7757fe5b90600052602060002090600502016001016000828254019250508190555061200c565b611fa382612f4b565b60018381548110611fb057fe5b90600052602060002090600b0201600a016000611fcc85612986565b8152602001908152602001600020611fe3846129f5565b81548110611fed57fe5b9060005260206000209060050201600201600082825401925050819055505b5050565b60003411612069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061314d6023913960400191505060405180910390fd5b343373ffffffffffffffffffffffffffffffffffffffff163110156120d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131c86021913960400191505060405180910390fd5b6120e281612a3b565b600181815481106120ef57fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156121a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806131966032913960400191505060405180910390fd5b600181815481106121b257fe5b90600052602060002090600b020160050160019054906101000a900460ff1615612244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50726f6a6563742069732063757272656e746c7920696e20766f74650000000081525060200191505060405180910390fd5b6001818154811061225157fe5b90600052602060002090600b020160050160009054906101000a900460ff16156122e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f50726f6a6563742066756e64696e672069732066696e6973686564000000000081525060200191505060405180910390fd5b6122ec81610ce7565b61241257600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550336001828154811061236757fe5b90600052602060002090600b020160070160006001848154811061238757fe5b90600052602060002090600b020160060154815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018082815481106123f357fe5b90600052602060002090600b0201600601600082825401925050819055505b346001828154811061242057fe5b90600052602060002090600b020160010160008282540192505081905550346001828154811061244c57fe5b90600052602060002090600b020160020160008282540192505081905550346001828154811061247857fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561256157602002820191906000526020600020905b81548152602001906001019080831161254d575b5050505050905090565b61257481610ce7565b6125c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806131706026913960400191505060405180910390fd5b600181815481106125d657fe5b90600052602060002090600b020160050160019054906101000a900460ff1615612668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6a65637420697320616c726561647920696e20766f746500000000000081525060200191505060405180910390fd5b6001818154811061267557fe5b90600052602060002090600b020160050160009054906101000a900460ff1615612707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b61271081610c87565b6203f48042011061276c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806130f56036913960400191505060405180910390fd5b6001818154811061277957fe5b90600052602060002090600b0201600a01600061279583612986565b81526020019081526020016000206040518060800160405280600060018111156127bb57fe5b815260200160008152602001600081526020016203f48042018152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548160ff0219169083600181111561282657fe5b0217905550602082015181600101556040820151816002015560608201518160030155505050600180828154811061285a57fe5b90600052602060002090600b020160050160016101000a81548160ff02191690831515021790555050565b6060600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561291057602002820191906000526020600020905b8154815260200190600101908083116128fc575b5050505050905090565b6003602052816000526040600020818154811061293357fe5b90600052602060002001600091509150505481565b600061295382612a3b565b6001828154811061296057fe5b90600052602060002090600b020160050160009054906101000a900460ff169050919050565b600061299182612a3b565b6001828154811061299e57fe5b90600052602060002090600b0201600401549050919050565b60006129c282612a3b565b600182815481106129cf57fe5b90600052602060002090600b020160050160019054906101000a900460ff169050919050565b60006001808381548110612a0557fe5b90600052602060002090600b0201600a016000612a2185612986565b815260200190815260200160002080549050039050919050565b8060018080549050031015612ab8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f50726f6a65637420646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b50565b6000612ac56130c1565b612ace83612ae4565b9050806040015181602001511015915050919050565b612aec6130c1565b612af5826129b7565b612b67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f50726f6a656374206973206e6f742063757272656e746c7920696e20766f746581525060200191505060405180910390fd5b60018281548110612b7457fe5b90600052602060002090600b0201600a016000612b9084612986565b8152602001908152602001600020612ba7836129f5565b81548110612bb157fe5b90600052602060002090600502016040518060800160405290816000820160009054906101000a900460ff166001811115612be857fe5b6001811115612bf357fe5b815260200160018201548152602001600282015481526020016003820154815250509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742061646d696e0000000000000000000000000081525060200191505060405180910390fd5b612ce781612948565b15612d5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f50726f6a6563742069732066696e69736865640000000000000000000000000081525060200191505060405180910390fd5b60008090505b60018281548110612d6d57fe5b90600052602060002090600b020160060154811015612eff5760006103e8612d9484612fda565b60018581548110612da157fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281612df857fe5b04905060018381548110612e0857fe5b90600052602060002090600b0201600701600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050612ef1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4572726f72207768696c6520726566756e64696e67000000000000000000000081525060200191505060405180910390fd5b508080600101915050612d60565b5050565b600060018281548110612f1257fe5b90600052602060002090600b02016003015460018381548110612f3157fe5b90600052602060002090600b020160040154149050919050565b600060018281548110612f5a57fe5b90600052602060002090600b020160010154600a60018481548110612f7b57fe5b90600052602060002090600b020160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281612fd257fe5b049050919050565b600080600090505b60018381548110612fef57fe5b90600052602060002090600b020160010154811015613032576103e86001848154811061301857fe5b90600052602060002090600b020160020154029050612fe2565b6001838154811061303f57fe5b90600052602060002090600b020160010154818161305957fe5b04915050919050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060800160405280600060018111156130d957fe5b8152602001600081526020016000815260200160008152509056fe42616c6c6f742063616e6e6f742062652061736b656420332064617973206265666f72652074686520656e64206f662061207461736b546f74616c207461736b73206d7573742062652067726561746572207468616e2030416d6f756e742073656e742073686f756c6420626520686967686572207468616e203053656e646572206973206e6f7420612066756e646572206f6620746869732070726f6a65637450726f6a656374206f776e65722063616e6e6f742073656e642066756e647320746f20686973206f776e2070726f6a65637453656e64657220646f6573206e6f74206861766520656e6f7567682066756e64734e756d626572206f66207461736b7320646f206e6f7420636f72726573706f6e6420746f206e756d626572206f6620616d6f756e7473446561646c696e65732073686f756c6420616c7761797320626520686967686572446561646c696e65732073686f756c6420626520686967686572207468616e206e6f774e756d626572206f66207461736b7320646f206e6f7420636f72726573706f6e6420746f206e756d626572206f6620646561646c696e6573a265627a7a723158204520618375073dd6f9c7d87fdbcbe0f1394dbfe6d6eb4226415504dbb1ff62a364736f6c63430005100032";

    public static final String FUNC_FUNDERPROJECT = "funderProject";

    public static final String FUNC_OWNERPROJECT = "ownerProject";

    public static final String FUNC_PROJECTS = "projects";

    public static final String FUNC_LAUNCHFUNDINGPROJECT = "launchFundingProject";

    public static final String FUNC_ENDVOTE = "endVote";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_DIDVOTE = "didVote";

    public static final String FUNC_GETDEADLINEFORCURRENTTASK = "getDeadlineForCurrentTask";

    public static final String FUNC_ASKEDBALLOT = "askedBallot";

    public static final String FUNC_LAUNCHBALLOT = "launchBallot";

    public static final String FUNC_GETNEXTID = "getNextId";

    public static final String FUNC_FUND = "fund";

    public static final String FUNC_CURRENTTASK = "currentTask";

    public static final String FUNC_GETTOTALTASKS = "getTotalTasks";

    public static final String FUNC_ISFINISHED = "isFinished";

    public static final String FUNC_ISINVOTE = "isInVote";

    public static final String FUNC_ISFUNDER = "isFunder";

    public static final String FUNC_GETAMOUNTCOLLECTED = "getAmountCollected";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPROJECTSFOROWNER = "getProjectsForOwner";

    public static final String FUNC_GETPROJECTSFORFUNDER = "getProjectsForFunder";

    public static final String FUNC_GETCURRENTADDRESSPROJECTS = "getCurrentAddressProjects";

    public static final String FUNC_GETCURRENTADDRESSFUNDEDPROJECTS = "getCurrentAddressFundedProjects";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> funderProject(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_FUNDERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> ownerProject(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_OWNERPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>> projects(BigInteger param0) {
        final Function function = new Function(FUNC_PROJECTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>>(function,
                new Callable<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> launchFundingProject(BigInteger totalTasks, List<BigInteger> deadlines, List<BigInteger> amounts) {
        final Function function = new Function(
                FUNC_LAUNCHFUNDINGPROJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(totalTasks), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(deadlines, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endVote(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ENDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger projectId, Boolean value) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId), 
                new org.web3j.abi.datatypes.Bool(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> didVote(BigInteger projectId) {
        final Function function = new Function(FUNC_DIDVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getDeadlineForCurrentTask(BigInteger projectId) {
        final Function function = new Function(FUNC_GETDEADLINEFORCURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> askedBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_ASKEDBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> launchBallot(BigInteger projectId) {
        final Function function = new Function(
                FUNC_LAUNCHBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNextId() {
        final Function function = new Function(FUNC_GETNEXTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> fund(BigInteger projectId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_FUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> currentTask(BigInteger projectId) {
        final Function function = new Function(FUNC_CURRENTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalTasks(BigInteger projectId) {
        final Function function = new Function(FUNC_GETTOTALTASKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isFinished(BigInteger projectId) {
        final Function function = new Function(FUNC_ISFINISHED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isInVote(BigInteger projectId) {
        final Function function = new Function(FUNC_ISINVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isFunder(BigInteger projectId) {
        final Function function = new Function(FUNC_ISFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getAmountCollected(BigInteger projectId) {
        final Function function = new Function(FUNC_GETAMOUNTCOLLECTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner(BigInteger projectId) {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getProjectsForOwner(String _owner) {
        final Function function = new Function(FUNC_GETPROJECTSFOROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getProjectsForFunder(String _funder) {
        final Function function = new Function(FUNC_GETPROJECTSFORFUNDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_funder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCurrentAddressProjects() {
        final Function function = new Function(FUNC_GETCURRENTADDRESSPROJECTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCurrentAddressFundedProjects() {
        final Function function = new Function(FUNC_GETCURRENTADDRESSFUNDEDPROJECTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
